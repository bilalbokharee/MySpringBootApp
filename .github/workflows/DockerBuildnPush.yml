name: DockerBuildnPush

on:
  workflow_call:

    inputs:
      jar_name:
        description: Jar file name
        required: true
        type: string

      jar_path:
        description: Jar file path
        required: true
        type: string

      ecr_repo:
        description: Name of ECR repo to push & pull image from
        required: true
        type: string

jobs:
  buildimagenpush:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_ACTIONS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.GH_ACTIONS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.GH_ACTIONS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.jar_name }}
          path: ${{ inputs.jar_path }}

      - name: Docker Build & tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ inputs.ecr_repo }}
          JAR_PATH: ${{ inputs.jar_path }}
          JAR_NAME: ${{ inputs.jar_name }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          docker build \
            --build-arg JAR_FILE=$JAR_PATH/$JAR_NAME \
            -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Docker Build & tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ inputs.ecr_repo }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
